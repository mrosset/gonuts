#!/usr/bin/env bash

set -ehu

unset GOPATH GOROOT
#PATH=/usr/bin

# This is a hack so we can change HOME form 
GOROOT_BOOTSTRAP="$HOME/go1.4"
OS=linux
ARCH=amd64
#URL="https://storage.googleapis.com/golang/go1.4.3.${OS}-${ARCH}.tar.gz"
URL="http://localhost/go1.4.3.${OS}-${ARCH}.tar.gz"
SRC="$HOME/src"
#GIT="https://github.com/golang/go"
GIT="/home/strings/src/go.git"
BRANCH="go1.6"
TARBALL="$SRC/$(basename $URL)"

# TODO add OS and ARCH logic

mkdir -p "$HOME/src" || true

# Prints out version details
versions() {
    for i in gcc ld make; do
        $i --version | head -1
    done

    env | grep GO || true
    "$HOME/go/bin/go" version || true
}

# Get go1.4 binaries
if [[ ! -f "$TARBALL" ]]; then
    curl -# "$URL" -o "$TARBALL"
fi

# Stage go1.4 binaries
if [[ ! -d "$HOME/go1.4" ]]; then
    tar -xf "$TARBALL" -C "$HOME"
    # FIXME this is hackish. what if go exists
    mv -v "$HOME/go" "$HOME/go1.4"
fi

# clone golang sources from upstream
if [[ ! -d "$HOME/src/go.git/" ]]; then
    git clone -b "$BRANCH" "$GIT" "$HOME/src/go.git/"
fi

# stage in final GOROOT
if [[ ! -d "$HOME/go/" ]]; then
    git clone -b "$BRANCH" "$HOME/src/go.git/" "$HOME/go"
fi

# Do not build go if go binary exists and works
if $HOME/go/bin/go version > /dev/null; then
    versions
    exit 0
fi

# Finally build go
(
    cd "$HOME/go/src"
    ./make.bash
)
